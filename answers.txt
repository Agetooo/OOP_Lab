9: Reading Assignment: When should accessor methods be used?
Các phương thức truy cập (accessor methods) nên được sử dụng khi cần lấy giá trị của thuộc tính trong một lớp mà không trực tiếp truy cập vào biến thành viên. Điều này giúp bảo vệ dữ liệu bằng cách duy trì tính đóng gói (encapsulation), đảm bảo rằng các thuộc tính chỉ có thể được truy xuất theo cách kiểm soát được. Ngoài ra, việc sử dụng phương thức truy cập giúp dễ dàng mở rộng hoặc thay đổi cách xử lý dữ liệu mà không ảnh hưởng đến mã nguồn bên ngoài đang sử dụng lớp đó.

10. If you create a constructor method to build a DVD by title then create a constructor method to build a DVD by category. Does JAVA allow you to do this?
Có thể tạo thêm một constructor khác khởi tạo DVD bằng category, Tuy nhiên, có một vấn đề: Nếu chỉ truyền vào một chuỗi (String) khi khởi tạo, Java sẽ không biết mình đang muốn gọi constructor nào, vì cả title và category đều là kiểu String.
Nếu cố chạy: Java sẽ báo lỗi biên dịch (compile-time error) và không thể xác định được constructor nào cần được gọi.
"Constructor DigitalVideoDisc(String) is already defined in class DigitalVideoDisc"

14.1: Try to add a method addDigitalVideoDisc which allows to pass an arbitrary number of 
arguments for dvd. Compared to an array parameter. What do you prefer in this case?
So sánh: sử dụng mảng hay varargs (...)
Varargs (...) linh hoạt hơn vì không cần tạo mảng trước khi gọi phương thức.
Mảng (DigitalVideoDisc[]) yêu cầu tạo một mảng trước khi truyền vào.
Varargs thường được ưu tiên khi số lượng tham số chưa xác định trước.
Tuy nhiên ở đây do cart đã giới hạn mảng là 20 nên có thể ưu tiên sử dụng mảng tĩnh

15.0: Is JAVA a Pass by Value or a Pass by Reference programming language?
Java là Pass by Value (Truyền tham trị), không phải Pass by Reference, Bởi:
Khi truyền biến kiểu nguyên thủy (int, double, char,...) vào một phương thức, giá trị thực sự được sao chép và truyền vào.
Khi truyền biến đối tượng vào một phương thức, giá trị của tham chiếu (địa chỉ bộ nhớ) của đối tượng được sao chép và truyền vào, chứ không phải bản thân đối tượng.

15.1:  After the call of swap(jungleDVD, cinderellaDVD) why does the title of these two objects still remain?
Khi phương thức swap() được gọi, các tham số o1 và o2 chỉ là bản sao của tham chiếu đến jungleDVD và cinderellaDVD.
Bên trong phương thức, chúng ta chỉ hoán đổi các bản sao của tham chiếu đó, không thay đổi nội dung thực sự của các đối tượng.
Khi thoát khỏi phương thức, jungleDVD và cinderellaDVD trong main() vẫn trỏ đến các đối tượng ban đầu, không bị hoán đổi.

15.2: After the call of changeTitle(jungleDVD, cinderellaDVD.getTitle()) why is the title of the JungleDVD changed?
Khi gọi changeTitle(jungleDVD, cinderellaDVD.getTitle()):
dvd ban đầu trỏ đến cùng một đối tượng với jungleDVD.
Lệnh dvd.setTitle(title); thay đổi nội dung của đối tượng mà dvd trỏ đến → jungleDVD cũng bị thay đổi.
Sau đó, dvd = new DigitalVideoDisc(oldTitle); tạo một đối tượng mới nhưng không ảnh hưởng đến jungleDVD trong main() vì dvd chỉ là bản sao tham chiếu.


